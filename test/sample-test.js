const { expect } = require("chai");
// const { ethers } = require("hardhat");


describe("Staking contract ",  function () {
  let balanceOfOwner;
  let _aura;
  let _auraStaking;
  let staker;
  let owner;
  it("Balance should be assigned to the owner", async function () {
   [owner, staker] = await ethers.getSigners()

    const _AURADeploy =  await ethers.getContractFactory("AURA")
    
    
    const _AURAStakingDeploy = await ethers.getContractFactory("AURAStaking")
  
     _aura = await _AURADeploy.deploy()
     _auraStaking = await _AURAStakingDeploy.deploy(_aura.address, 100, "10000000000000000000")
  
    _aura.deployed()
    _auraStaking.deployed()
    
    
   balanceOfOwner = await _aura.balanceOf(owner.address)
    expect(balanceOfOwner).to.equal("100000000000000000000000000")
  });

  it("Invalid number assigned to the owner on deploying the contract",async function () {

    expect(balanceOfOwner).to.equal("100000000000000000000000000")
  });

  it("Approve Tokens from owner to Pool and Increase allowances",async ()=>{
    await _aura.approve(_auraStaking.address, "100000000000000000000")
    await _auraStaking.IncreaseAllocationReward("100000000000000000000")
    expect("100000000000000000000").to.equal(await _aura.balanceOf(_auraStaking.address))
    // console.log(await _aura.balanceOf(_auraStaking.address))
  });

  it("Transfer Tokens from owner to staker1 and approve All amount from staker to Staking pool", async ()=>{
    await _aura.transfer(staker.address, "200000000000000000000")
    await _aura.connect(staker).approve(_auraStaking.address, "100000000000000000000")
    let allowances = await _aura.allowance(staker.address, _auraStaking.address)

    expect("100000000000000000000").to.equal(allowances)
    expect("200000000000000000000").to.equal(await _aura.balanceOf(staker.address))

    // console.log(await _aura.balanceOf(staker.address))
  });

  it("Lets enter wrong time and wrong minimum amount to let the user not to stake", async ()=>{

    let ans 
    try{
     ans = await _auraStaking.connect(staker).Stake("9000000000000000000", 31536000)
    } catch(err){
      console.log(err.message," |   Error Generated by purpose");
    }

    try{
     ans = await _auraStaking.connect(staker).Stake("10000000000000000000", 31536001)
    } catch(err){
      console.log(err.message," |   Error Generated by purpose");
    }
    

    await _auraStaking.connect(staker).Stake("10000000000000000000", 31536000)
    expect("10000000000000000000").to.equal(await _auraStaking.CurrentlyStaked(staker.address))
    expect("10000000000000000000").to.equal(await _auraStaking.TotalPendingReward(staker.address))
    let delegates = await _auraStaking.TotalDelegates()
    // console.log(delegates)
    expect(1).to.equal(delegates)
  });

  // it("Check the user stats", async ()=>{
  //   console.log(await _auraStaking.userSTATS(staker.address))
  // });

  it("Increasing the block timestamp to claim the reward after 6 month", async ()=>{
    await ethers.provider.send("evm_increaseTime", [15811200])
    await _auraStaking.connect(staker).Claim()
  });
  
  it("Increasing the time to the expiry time and claiming all the reward", async ()=>{
    await network.provider.send("evm_increaseTime", [31536000])
    await _auraStaking.connect(staker).Claim()
    // console.log(await _auraStaking.userSTATS(staker.address))
  });

  it("Calling withdraw without Unstake call",async ()=>{
    
    try{
      await _auraStaking.connect(staker).Withdraw()
    }catch(err){
      console.log(err.message, " |   Error Generated by purpose")
    }
  });

  it("UnStaking and withdrawing and checking the balance of the User", async ()=>{
    await _auraStaking.connect(staker).UnStake()
    await _auraStaking.connect(staker).Withdraw()
    expect("210000000000000000000").to.equal(await _aura.balanceOf(staker.address))
    console.log(await _aura.balanceOf(staker.address))

  })





});
 
